I use this file to note installation steps and decisions I make when installing
and configuring Arch.

https://wiki.archlinux.org/title/installation_guide

* System Overview

** =systemd-boot=  bootloader (https://wiki.archlinux.org/title/systemd-boot)
** Booted in UEFI mode
** Busybox-based =initramfs= with the =encrypt= hook
** Partitions: =efi=, =root=
** Filesystem is =btrfs= (the =root= partition)
** Disk encryption of the =root= partition with passphrase

* Steps

Check that our system is booted in 64-bit x64 UEFI mode:

#+begin_src bash
    $ cat /sys/firmware/efi/fw_platform_size
    64
#+end_src

Partition table:

#+begin_src bash
  $ fdisk --list
  [...]
  Device           Start        End   Sectors   Size Type
  /dev/nvme0n1p1    2048    1050623   1048576   512M EFI System
  /dev/nvme0n1p2 1050624 1000214527 999163904 476.4G Linux filesystem
  [...]
#+end_src

* Disk Encryption

I use disk encryption with =passphrase= and only encrypt my root partition. I do not
encrypt my boot partition.

Load module =dm_crypt=:

#+begin_src bash
  $ modprobe dm_crypt
#+end_src

Format the encrypted container for =root= and then open it:

#+begin_src bash
  $ cryptsetup luksFormat --type luks2 --label=root /dev/xxx
  $ cryptsetup open /dev/xxx root
#+end_src

Once opened, the root partition device address would be =/dev/mapper/root= instead
of the partition (e.g. =/dev/xxx=). In order to write encrypted data into the
partition it must be accessed through the device mapped name.

(Hardly ever needed) To close a LUKS container named "root", unmount the partition and then
do:

#+begin_src bash
  $ cryptsetup close root
#+end_src

Make and format our filesystems. The UEFI partition must be FAT 32.

#+begin_src bash
  $ mkfs.fat -F 32 -n boot /dev/xxx
  $ mkfs.btrfs -L root /dev/mapper/root
#+end_src

Mount our partitions. The mount devices and compression argument will be used by
=genfstab= below... but of course we can still edit =/etc/fstab= later.

#+begin_src bash
  $ mount -o compress=zstd:3 LABEL=root /mnt
  $ mount --mkdir LABEL=boot /mnt/boot
#+end_src

Bootstrap:

#+begin_src bash
  $ pacstrap -K /mnt base linux linux-firmware
#+end_src

Before chrooting into our new system, let's create our =btrfs= subvolumes and set
them to mount. Here follow the [[https://wiki.archlinux.org/title/snapper#Suggested_filesystem_layout][suggest filesystem layout]] from the =snapper= wiki:

#+begin_src bash
  $ btrfs subvol create /mnt/@
  $ btrfs subvol create /mnt/@home
  $ btrfs subvol create /mnt/@.snapshots
  $ btrfs subvol create /mnt/@var_log
#+end_src

Verify our =/etc/fstab=:

#+begin_src bash
# Static information about the filesystems.
# See fstab(5) for details.

# <file system> <dir> <type> <options> <dump> <pass>
#
# Do not use labels to identify the devices here.
# Because both my unencrypted and encrypted root devices are labeled ROOT,
# systemd-boot seems to get confused as to which one to pick at boot.
# When it picks the unecrypted, boot fails.
#
/dev/mapper/root	/		btrfs		rw,relatime,compress=zstd:3,ssd,space_cache=v2,subvol=@			0 0
/dev/mapper/root	/home		btrfs		rw,relatime,compress=zstd:3,ssd,space_cache=v2,subvol=@home		0 0
/dev/mapper/root	/.snapshots	btrfs		rw,relatime,compress=zstd:3,ssd,space_cache=v2,subvol=@.snapshots	0 0
/dev/mapper/root	/var/log        btrfs		rw,relatime,compress=zstd:3,ssd,space_cache=v2,subvol=@var_log		0 0

# Omit the boot partition here. systemd-boot can find it somehow.

#+end_src

The sub-volume =@.snapshots= will be replaced below during snapper
configuration. Maybe we should avoid creating it here to avoid the extra work
later...

* Chrooted with =arch-chroot=

** Network

Install:

#+begin_src bash
  $ pacman -S networkmanager
#+end_src

Enable:

#+begin_src bash
  $ systemctl enable NetworkManager.service
#+end_src

** Initial ramdisk

Add =sd-encrypt= to HOOKS in =/etc/mkinitcpio.conf= (after =systemd=, and between =block= and
=filesystems=). Here's what the entire =HOOKS= looks like:

#+begin_src bash
HOOKS=(base systemd autodetect microcode modconf kms keyboard sd-vconsole block sd-encrypt filesystems fsck)
#+end_src

*A note on firmware*: The =microcode= hook goes after =autodetect= so only the
required firmware is added to the image. Forthe =microcode= hook to work, probably
need to install the package =intel-ucode=
(https://wiki.archlinux.org/title/microcode).

Regenerate the =initramfs=:

#+begin_src bash
  $ mkinitcpio -P
#+end_src

** systemd-boot (bootloader)

https://wiki.archlinux.org/title/systemd-boot

Install the UEFI boot manager:

#+begin_src bash
  $ bootctl install
#+end_src

This should put the bootloader in =/boot/EFI=.

Set the default =btrfs= volume to be the root of our filesystem so we don't have
to pass it as a kernel argument:

Install =btrfs-progs= if needed.

#+begin_src bash
  $ btrfs subvol set-default 5 /
#+end_src

*Loader configuration*: Check =loader.conf=:

#+begin_src bash
  $ cat /boot/loader/loader.conf
  timeout 3
  console-mode keep
#+end_src

Check our Arch loader:

#+begin_src bash
  $ cat /boot/loader/entries/arch.conf
  title   Arch Linux
  linux   /vmlinuz-linux
  initrd  /initramfs-linux.img
  options rw rd.luks.name=971c205a-e646-4914-8d7c-ed6a01ec360b=root rootflags=subvol=@ root=/dev/mapper/root loglevel=3 quiet
#+end_src

Where:
  + =rd.luks.name= is the UUID of the *encrypted* device
  + =root= can safely point to the *decrypted* device by name (in =/dev/mapper/root=)
    because that's how we named it above
  + =subvol= in =rootflags= have to do with
    https://wiki.archlinux.org/title/btrfs#Mounting_subvolume_as_root. I find it
    helpful when supporting rollbacks of this "root" sub-volume.

** Users

At minimum, I install a user for myself.

#+begin_src bash
  $ useradd -m bruno
  $ passwd bruno
#+end_src

Add myself to sudoers:

#+begin_src bash
  $ gpasswd -a bruno wheel
#+end_src

Configure =/etc/sudoers= to allow members of wheel to execute any command.

* Checks after first reboot

Internet connection:

#+begin_src bash
  $ ping archlinux.org
#+end_src

Root partition is encrypted (=TYPE=crypto_LUKS=):

#+begin_src bash
  $ blkid /dev/sda*
#+end_src

Filesystem is =btrfs= in our encrypted root:

#+begin_src bash
  $ btrfs filesystem show /dev/mapper/root
#+end_src

Our =btrfs= subvolumes:

#+begin_src bash
  $ btrfs subvol list /
#+end_src

Check our partitions and labels:

#+begin_src bash
  $ blkid
  $ lsblk -f
#+end_src

* Troubleshooting with an arch live cd

Boot from the cd.

Decrypt our root partition:

#+begin_src bash
  $ cryptsetup open /dev/sda3 root
#+end_src

Mount root and boot (assuming the EFI partition is =/dev/sda1=):

#+begin_src bash
  $ mount LABEL=root /mnt
  $ mount LABEL=boot /mnt/boot
#+end_src

Chroot:

#+begin_src bash
  $ arch-chroot /mnt
#+end_src

To exit:

#+begin_src bash
  $ exit
  $ umount -R /mnt
#+end_src

* Package management

I use [[https://github.com/Jguer/yay][yay]] as my AUR helper.

#+begin_src bash
  $ pacman -S --needed git base-devel
  $ git clone https://aur.archlinux.org/yay.git
  $ cd yay
  $ makepkg -si
#+end_src

Enable colored output by enabling =Color= in =/etc/pacman.conf=.

* Configuring snapshots

The packages I use are

- =snapper= :: Command-line program for filesystem snapshot management.
- =snap-pac= :: Pacman hooks that use snapper to create pre/post btrfs snapshots.
- =snapper-rollback= :: Python script to rollback btrfs systems.
- =grub-btrfs= :: Include btrfs snapshots in boot options.

The =snapper= package comes with two services that I use

- =snapper-timeline=
- =snapper-cleanup=

Create the configuration:

#+begin_src bash
  $ umount /.snapshots
  $ rm -rf /.snapshots
  $ snapper -c root create-config /
#+end_src

Because we created the =@.snapshots= sub-volume above, we follow [[https://wiki.archlinux.org/title/snapper#Configuration_of_snapper_and_mount_point][these extra steps
to replace it]].

From here, =snapper ls= should be working (probably under =sudo=).

Edit =/etc/snapper/configs/root=:

#+begin_src bash
  ALLOW_GROUPS="wheel"

  TIMELINE_LIMIT_HOURLY="5"
  TIMELINE_LIMIT_DAILY="7"
  TIMELINE_LIMIT_WEEKLY="0"
  TIMELINE_LIMIT_MONTHLY="0"
  TIMELINE_LIMIT_YEARLY="0"
#+end_src

Enable =grub-btrfs=,

#+begin_src bash
  $ systemctl start grub-btrfsd
  $ systemctl enable grub-btrfsd
#+end_src

And,

#+begin_src bash
  $ systemctl start snapper-timeline.timer
  $ systemctl enable snapper-timeline.timer
  $ systemctl start snapper-cleanup.timer
  $ systemctl enable snapper-cleanup.timer
#+end_src

* Rollback

https://wiki.archlinux.org/title/snapper#Restoring_/_to_its_previous_snapshot

#+begin_src bash
  $ cryptsetup open /dev/sda3 root
  $ mount -o subvolid=5 LABEL=root /mnt
  $ btrfs subvol delete /mnt/@
  $ btrfs subvol snapshot /mnt/@.snapshots/{number}/snapshot /mnt/@
  $ umount -R /mnt
#+end_src

Regenerate the initramfs image, probably only necessary if we're rolling back a
Kernel:

#+begin_src bash
  $ mount -o subvol=@ LABEL=root /mnt
  $ mount LABEL=boot /mnt/boot
  $ arch-chroot /mnt
  $ mkinitcpio -P
  $ exit
  $ umount -R /mnt
#+end_src

We regenerate the initramfs image because =vmlinuz-linux= and
=initramfs-linux.img= are in a separate partition (mounted at =/boot=).

This process relies on having =subvol=@= in =rootflags= in GRUB. That's why we don't
need to reconfigure the bootloader.

Reboot.

* cron

I use =cronie= for crontab management: =pacman -S cronie=. It installs the =crontab= command.
